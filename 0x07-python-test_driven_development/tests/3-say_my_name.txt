The ``say_my_name`` module
-----------------------------------

Using 'say_my_name' function
===================================

Importing the function from the say_my_name module
::
>>> say_my_name = __import__('3-say_my_name').say_my_name

Checking docstring of the module
::
>>> m = __import__('3-say_my_name').__doc__
>>> len(m) > 1
True

Checking docstring of the function
::
>>> n = __import__('3-say_my_name').say_my_name.__doc__
>>> len(n) > 1
True

POSITIVE TESTING
===================================

When both first_name and last_name are given correctly
::
>>> say_my_name("John", "Smith")
My name is John Smith

Other name scenarios
::
>>> say_my_name("Mojalefa", "Kodisang")
My name is Mojalefa Kodisang

When last_name is not given
::
>>> say_my_name("Julian")
My name is Julian 

When either first_name or last_name are very long strings
::
>>> last_name = "hello" * 20
>>> say_my_name("Julian", last_name)
My name is Julian hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohello
 
NEGATIVE TESTING
===================================

When first_name is an integer
::
>>> say_my_name(12, "Mojalefa")
Traceback (most recent call last):
	...
TypeError: first_name must be a string

When last_name is an integer
::
>>> say_my_name("John", 23)
Traceback (most recent call last):
	...
TypeError: last_name must be a string

When either first_name or last_name are floats
::
>>> say_my_name(1.30, "James")
Traceback (most recent call last):
	...
TypeError: first_name must be a string

>>> say_my_name("James", 3.56)
Traceback (most recent call last):
	...
TypeError: last_name must be a string

When first_name is not given
::
>>> say_my_name()
Traceback (most recent call last):
	...
TypeError: say_my_name() missing 1 required positional argument: 'first_name'
