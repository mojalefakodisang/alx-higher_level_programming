# Importing the module and methods

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# Checking documentation
>>> mod_doc = __import__('7-base_geometry').__doc__
>>> len(mod_doc) > 0
True
>>> class_doc = __import__('7-base_geometry').BaseGeometry.__doc__
>>> len(class_doc) > 0
True
>>> area_doc = __import__('7-base_geometry').BaseGeometry.area.__doc__
>>> len(area_doc) > 0
True
>>> validator_doc = __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__
>>> len(validator_doc) > 0
True

==========================
Checking Positive outcomes
==========================

# Checking when calling area method - not implemented yet
>>> base_geometry = BaseGeometry()
>>> base_geometry.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

# Checking when values of a base geometry are normal
>>> base_geometry = BaseGeometry()
>>> base_geometry.integer_validator("width", 3)
>>> base_geometry.integer_validator("height", 4)

==========================
Checking Negative outcomes
==========================

# Checking if the name is None when validating
>>> base_geometry = BaseGeometry()
>>> base_geometry.integer_validator(None, 2)

# Checking if the value is None when validating
>>> base_geometry = BaseGeometry()
>>> base_geometry.integer_validator("width", None)
Traceback (most recent call last):
...
TypeError: width must be an integer

# Checking when the value is less than or equal to zero
>>> base_geometry = BaseGeometry()
>>> base_geometry.integer_validator("width", -1)
Traceback (most recent call last):
...
ValueError: width must be greater than 0

>>> base_geometry = BaseGeometry()
>>> base_geometry.integer_validator("width", 0)
Traceback (most recent call last):
...
ValueError: width must be greater than 0


# Checking when the value is a float when validating
>>> base_geometry = BaseGeometry()
>>> base_geometry.integer_validator("width", 1.01)
Traceback (most recent call last):
...
TypeError: width must be an integer

# Checking when the value is a float infinite when validating
>>> base_geometry = BaseGeometry()
>>> base_geometry.integer_validator("width", float('inf'))
Traceback (most recent call last):
...
TypeError: width must be an integer

# Checking when the value is a list when validating
>>> base_geometry = BaseGeometry()
>>> base_geometry.integer_validator("width", [1, 2, 3, 4])
Traceback (most recent call last):
...
TypeError: width must be an integer

# Checking when the value is a tuple when validating
>>> base_geometry = BaseGeometry()
>>> base_geometry.integer_validator("width", (1, 2))
Traceback (most recent call last):
...
TypeError: width must be an integer

# Checking when the value is a dictionary when validating
>>> base_geometry = BaseGeometry()
>>> base_geometry.integer_validator("width", {"key": "value"})
Traceback (most recent call last):
...
TypeError: width must be an integer