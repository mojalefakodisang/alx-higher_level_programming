The '7-base_geometry.py' doctest
===================================

Using area and integer_validator methods from BaseGeometry class
----------------------------------------------------------------

Importing the modules
::
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> area = __import__('7-base_geometry').BaseGeometry.area
>>> integer_validator = __import__('7-base_geometry').BaseGeometry.integer_validator

Checking the docstring of the document
::
>>> Class = __import__('7-base_geometry').BaseGeometry.__doc__
>>> len(Class) > 1
True
>>> module_area = __import__('7-base_geometry').BaseGeometry.area.__doc__
>>> len(module_area) > 1
True
>>> module_integer = __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__
>>> len(module_integer) > 1
True

Giving an object a class BaseGeometry
>>> obj = BaseGeometry()

POSITIVE TESTING
===================================

Checking if name and integer are validated
::
>>> obj.integer_validator("Name", 10)

Checking if integer is a very large number
::
>>> obj.integer_validator("Name", 99999999999)

NEGATIVE TESTING
===================================

Checking if value is not an integer
::
>>> obj.integer_validator("Name", "string")
Traceback (most recent call last):
	...
TypeError: Name must be an integer

>>> obj.integer_validator("Name", 5.00)
Traceback (most recent call last):
	...
TypeError: Name must be an integer

Checking when value is None
::
>>> obj.integer_validator("Name")
Traceback (most recent call last):
	...
TypeError: integer_validator() missing 1 required positional argument: 'value'

Checking if value is positive and greater than 0
::
>>> obj.integer_validator("Name", -2)
Traceback (most recent call last):
	...
ValueError: Name must be greater than 0

Checking if value is zero
::
>>> obj.integer_validator("Name", 0)
Traceback (most recent call last):
	...
ValueError: Name must be greater than 0
